{"name":"Raise a Shield","type":"script","author":"wgjTDLixUZ8YXqS9","img":"systems/pf2e/icons/actions/raise-a-shield.webp","scope":"global","command":"game.pf2e.actions.raiseAShield({ actors: [token?.actor ?? actor ?? game.user.character].filter((actor) => actor) })","folder":null,"sort":0,"permission":{"default":0,"wgjTDLixUZ8YXqS9":3},"flags":{"core":{"sourceId":"Compendium.pf2e.action-macros.4hfQEMiEOBbqelAh"}},"_id":"ECDiwA2FQcakFZiZ"}
{"name":"Trip: Athletics","type":"script","author":"wgjTDLixUZ8YXqS9","img":"icons/svg/dice-target.svg","scope":"global","command":"game.pf2e.actions.trip({ event: event });","folder":null,"sort":0,"permission":{"default":0,"wgjTDLixUZ8YXqS9":3},"flags":{"core":{"sourceId":"Compendium.pf2e.action-macros.gRj7xUfcpUZQLrOC"}},"_id":"HLujT1cNJ0OmxwRs"}
{"name":"Cover","type":"script","author":"wgjTDLixUZ8YXqS9","img":"systems/pf2e/icons/conditions-2/status_acup.webp","scope":"global","command":"const actors = canvas.tokens.controlled.flatMap((token) => token.actor ?? []);\nif (!actors.length && game.user.character) {\n    actors.push(game.user.character);\n}\nconst ITEM_UUID = 'Compendium.pf2e.equipment-effects.I9lfZUiCwMiGogVi'; // Cover\nconst source = (await fromUuid(ITEM_UUID)).toObject();\nsource.flags.core ??= {};\nsource.flags.core.sourceId = ITEM_UUID;\nfor await (const actor of actors) {\n    const existing = actor.itemTypes.effect.find((effect) => effect.getFlag('core', 'sourceId') === ITEM_UUID);\n    if (existing) {\n        await existing.delete();\n    } else {\n        await actor.createEmbeddedDocuments('Item', [source]);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"wgjTDLixUZ8YXqS9":3},"flags":{"core":{"sourceId":"Macro.5MSwEC2QayCFL5BN"}},"_id":"LB6V6mSn4qA0t2Kr"}
{"name":"Shove: Athletics","type":"script","author":"wgjTDLixUZ8YXqS9","img":"icons/svg/dice-target.svg","scope":"global","command":"game.pf2e.actions.shove({ event: event });","folder":null,"sort":0,"permission":{"default":0,"wgjTDLixUZ8YXqS9":3},"flags":{"core":{"sourceId":"Compendium.pf2e.action-macros.yNry1xMZqdWHncbV"}},"_id":"S896iEuULeDcRJy8"}
{"name":"Feint: Deception","type":"script","author":"wgjTDLixUZ8YXqS9","img":"icons/svg/dice-target.svg","scope":"global","command":"game.pf2e.actions.feint({ event: event });","folder":null,"sort":0,"permission":{"default":0,"wgjTDLixUZ8YXqS9":3},"flags":{"core":{"sourceId":"Compendium.pf2e.action-macros.RjfPFjqPrNve6eeh"}},"_id":"TM7dczO8LzOasJy5"}
{"name":"Demoralize: Intimidation","type":"script","author":"wgjTDLixUZ8YXqS9","img":"icons/svg/dice-target.svg","scope":"global","command":"game.pf2e.actions.demoralize({ event: event });","folder":null,"sort":0,"permission":{"default":0,"wgjTDLixUZ8YXqS9":3},"flags":{"core":{"sourceId":"Compendium.pf2e.action-macros.nEwqNNWX6scLt4sc"}},"_id":"ZkThRODz3Moqpgzp"}
{"name":"Treat Wounds","type":"script","author":"wgjTDLixUZ8YXqS9","img":"icons/svg/regen.svg","scope":"global","command":"function CheckFeat(slug) {\n    if (token.actor.items.find((i) => i.data.data.slug === slug && i.type === \"feat\")) {\n        return true;\n    }\n    return false;\n}\nconst rollTreatWounds = async ({ DC, bonus, med, riskysurgery, mortalhealing }) => {\n    const options = actor.getRollOptions([\"all\", \"skill-check\", \"medicine\"]);\n    options.push(\"treat wounds\");\n    options.push(\"action:treat-wounds\");\n    const dc = {\n        value: DC,\n        visibility: \"all\",\n    };\n    if (riskysurgery || mortalhealing) {\n        dc.modifiers = {\n            success: \"one-degree-better\",\n        };\n    }\n    if (riskysurgery) {\n        options.push(\"risky-surgery\");\n    }\n    med.roll({\n        dc: dc,\n        event: event,\n        options: options,\n        callback: async (roll) => {\n            let healFormula, successLabel;\n            const magicHands = CheckFeat(\"magic-hands\");\n            const bonusString = bonus > 0 ? `+ ${bonus}` : \"\";\n            if (roll.data.degreeOfSuccess === 3) {\n                healFormula = magicHands ? `32${bonusString}` : `4d8${bonusString}`;\n                successLabel = \"Critical Success\";\n            } else if (roll.data.degreeOfSuccess === 2) {\n                healFormula = magicHands ? `16${bonusString}` : `2d8${bonusString}`;\n                successLabel = \"Success\";\n            } else if (roll.data.degreeOfSuccess === 1) {\n                successLabel = \"Failure\";\n            } else if (roll.data.degreeOfSuccess === 0) {\n                healFormula = \"1d8\";\n                successLabel = \"Critical Failure\";\n            }\n            if (riskysurgery) {\n                ChatMessage.create({\n                    user: game.user.id,\n                    type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n                    flavor: `<strong>Damage Roll: Risky Surgery</strong>`,\n                    roll: await new Roll(\"{1d8}[slashing]\").roll({ async: true }),\n                    speaker: ChatMessage.getSpeaker(),\n                });\n            }\n            if (healFormula !== undefined) {\n                const healRoll = await new Roll(`{${healFormula}}[healing]`).roll({ async: true });\n                const rollType = roll.data.degreeOfSuccess > 1 ? \"Healing\" : \"Damage\";\n                ChatMessage.create({\n                    user: game.user.id,\n                    type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n                    flavor: `<strong>${rollType} Roll: Treat Wounds</strong> (${successLabel})`,\n                    roll: healRoll,\n                    speaker: ChatMessage.getSpeaker(),\n                });\n            }\n        },\n    });\n};\nasync function applyChanges($html) {\n    for (const token of canvas.tokens.controlled) {\n        var med = token.actor.data.data.skills.med;\n        if (!med) {\n            ui.notifications.warn(`Token ${token.name} does not have the medicine skill`);\n            continue;\n        }\n        const { name } = token;\n        const mod = parseInt($html.find('[name=\"modifier\"]').val()) || 0;\n        const requestedProf = parseInt($html.find('[name=\"dc-type\"]')[0].value) || 1;\n        const riskysurgery = $html.find('[name=\"risky_surgery_bool\"]')[0]?.checked;\n        const mortalhealing = $html.find('[name=\"mortal_healing_bool\"]')[0]?.checked;\n        const skill = $html.find('[name=\"skill\"]')[0]?.value;\n        // Handle Rule Interpretation\n        if (game.user.isGM) {\n            await game.settings.set(\n                \"pf2e\",\n                \"RAI.TreatWoundsAltSkills\",\n                $html.find('[name=\"strict_rules\"]')[0]?.checked\n            );\n        }\n        var usedProf = 0;\n        if (game.settings.get(\"pf2e\", \"RAI.TreatWoundsAltSkills\")) {\n            if (skill === \"cra\") {\n                med = token.actor.data.data.skills[\"cra\"];\n            }\n            if (skill === \"nat\") {\n                med = token.actor.data.data.skills[\"nat\"];\n            }\n            usedProf = requestedProf <= med.rank ? requestedProf : med.rank;\n        } else {\n            usedProf = requestedProf <= med.rank ? requestedProf : med.rank;\n            if (skill === \"cra\") {\n                med = token.actor.data.data.skills[\"cra\"];\n            }\n            if (skill === \"nat\") {\n                med = token.actor.data.data.skills[\"nat\"];\n                if (usedProf === 0) {\n                    usedProf = 1;\n                }\n            }\n        }\n        const medicBonus = CheckFeat(\"medic-dedication\") ? (usedProf - 1) * 5 : 0;\n        const roll = [\n            () => ui.notifications.warn(`${name} is not trained in Medicine and doesn't know how to treat wounds.`),\n            () => rollTreatWounds({ DC: 15 + mod, bonus: 0 + medicBonus, med, riskysurgery, mortalhealing }),\n            () => rollTreatWounds({ DC: 20 + mod, bonus: 10 + medicBonus, med, riskysurgery, mortalhealing }),\n            () => rollTreatWounds({ DC: 30 + mod, bonus: 30 + medicBonus, med, riskysurgery, mortalhealing }),\n            () => rollTreatWounds({ DC: 40 + mod, bonus: 50 + medicBonus, med, riskysurgery, mortalhealing }),\n        ][usedProf];\n        roll();\n    }\n}\nif (token === undefined) {\n    ui.notifications.warn(\"No token is selected.\");\n} else {\n    const chirurgeon = CheckFeat(\"chirurgeon\");\n    const naturalMedicine = CheckFeat(\"natural-medicine\");\n    const dialog = new Dialog({\n        title: \"Treat Wounds\",\n        content: `\n<div>Select a target DC. Remember that you can't attempt a heal above your proficiency. Attempting to do so will downgrade the DC and amount healed to the highest you're capable of.</div>\n<hr/>\n${\n    chirurgeon || naturalMedicine\n        ? `\n<form>\n<div class=\"form-group\">\n<label>Treat Wounds Skill:</label>\n<select id=\"skill\" name=\"skill\">\n<option value=\"med\">Medicine</option>\n${chirurgeon ? `<option value=\"cra\">Crafting</option>` : ``}\n${naturalMedicine ? `<option value=\"nat\">Nature</option>` : ``}\n</select>\n</div>\n</form>\n`\n        : ``\n}\n<form>\n<div class=\"form-group\">\n<label>Medicine DC:</label>\n<select id=\"dc-type\" name=\"dc-type\">\n<option value=\"1\">Trained DC 15</option>\n<option value=\"2\">Expert DC 20, +10 Healing</option>\n<option value=\"3\">Master DC 30, +30 Healing</option>\n<option value=\"4\">Legendary DC 40, +50 Healing</option>\n</select>\n</div>\n</form>\n<form>\n<div class=\"form-group\">\n<label>DC Modifier:</label>\n<input id=\"modifier\" name=\"modifier\" type=\"number\"/>\n</div>\n</form>\n${\n    CheckFeat(\"risky-surgery\")\n        ? `<form><div class=\"form-group\">\n<label>Risky Surgery</label>\n<input type=\"checkbox\" id=\"risky_surgery_bool\" name=\"risky_surgery_bool\"></input>\n</div></form>`\n        : ``\n}\n${\n    CheckFeat(\"mortal-healing\")\n        ? `<form><div class=\"form-group\">\n<label>Mortal Healing</label>\n<input type=\"checkbox\" id=\"mortal_healing_bool\" name=\"mortal_healing_bool\" checked></input>\n</div></form>`\n        : ``\n}\n${\n    game.user.isGM\n        ? `<form><div class=\"form-group\">\n<label>Allow higher DC from alternate skills?</label>\n<input type=\"checkbox\" id=\"strict_rules\" name=\"strict_rules\"` +\n          (game.settings.get(\"pf2e\", \"RAI.TreatWoundsAltSkills\") ? ` checked` : ``) +\n          `></input>\n</div></form>`\n        : ``\n}\n</form>\n`,\n        buttons: {\n            yes: {\n                icon: `<i class=\"fas fa-hand-holding-medical\"></i>`,\n                label: \"Treat Wounds\",\n                callback: applyChanges,\n            },\n            no: {\n                icon: `<i class=\"fas fa-times\"></i>`,\n                label: \"Cancel\",\n            },\n        },\n        default: \"yes\",\n    });\n    dialog.render(true);\n}","folder":null,"sort":0,"permission":{"default":0,"wgjTDLixUZ8YXqS9":3},"flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.6duZj0Ygiqv712rq"}},"_id":"c0aWyEGHyZXGr9uO"}
{"name":"Tumble Through: Acrobatics","type":"script","author":"wgjTDLixUZ8YXqS9","img":"icons/svg/dice-target.svg","scope":"global","command":"game.pf2e.actions.tumbleThrough({ event: event });","folder":null,"sort":0,"permission":{"default":0,"wgjTDLixUZ8YXqS9":3},"flags":{"core":{"sourceId":"Compendium.pf2e.action-macros.2qhYHkcSsTJoSwrJ"}},"_id":"fjEQY00XebnvxmGB"}
{"name":"Overdrive","type":"script","author":"wgjTDLixUZ8YXqS9","img":"systems/pf2e/icons/actions/OneAction.webp","scope":"global","command":"game.pf2e.rollItemMacro(\"5sfihpl5d5ddopge\");","folder":null,"sort":0,"permission":{"default":0,"wgjTDLixUZ8YXqS9":3},"flags":{"pf2e":{"itemMacro":true},"core":{"sourceId":"Macro.rbdZOrpzGtcsONGr"}},"_id":"lZCAyL9Jk4zjBhym"}
{"name":"Earn Income","type":"script","author":"wgjTDLixUZ8YXqS9","img":"systems/pf2e/icons/equipment/treasure/currency/gold-pieces.webp","scope":"global","command":"function escapeHtml(html) {\n    const text = document.createTextNode(html);\n    const p = document.createElement('p');\n    p.appendChild(text);\n    return p.innerHTML;\n}\nfunction capitalize(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\nfunction isExperiencedProfessional(actor) {\n    return actor.data.items.some((item) => item.type === 'feat' && item.name === 'Experienced Professional');\n}\nfunction rankToProficiency(rank) {\n    if (rank === 0) {\n        return 'untrained';\n    } else if (rank === 1) {\n        return 'trained';\n    } else if (rank === 2) {\n        return 'expert';\n    } else if (rank === 3) {\n        return 'master';\n    } else {\n        return 'legendary';\n    }\n}\nfunction degreeOfSuccessLabel(degreeOfSuccessLabel) {\n    if (degreeOfSuccessLabel === 0) {\n        return 'Critical Failure';\n    } else if (degreeOfSuccessLabel === 1) {\n        return 'Failure';\n    } else if (degreeOfSuccessLabel === 2) {\n        return 'Success';\n    } else {\n        return 'Critical Success';\n    }\n}\nfunction coinsToString(coins, degreeOfSuccess) {\n    if (degreeOfSuccess === 'Critical Failure') {\n        return 'none';\n    } else {\n        return Object.entries(coins)\n            .map(([key, value]) => `${value} ${game.i18n.localize(CONFIG.PF2E.currencies[key])}`)\n            .join(', ');\n    }\n}\nfunction chatTemplate(skillName, earnIncomeResult) {\n    const degreeOfSuccess = degreeOfSuccessLabel(earnIncomeResult.degreeOfSuccess);\n    const payPerDay = escapeHtml(coinsToString(earnIncomeResult.rewards.perDay, degreeOfSuccess));\n    const combinedPay = escapeHtml(coinsToString(earnIncomeResult.rewards.combined, degreeOfSuccess));\n    const level = earnIncomeResult.level;\n    const daysSpentWorking = earnIncomeResult.daysSpentWorking;\n    const forDays =\n        daysSpentWorking > 1 ? `<p><strong>Salary for ${daysSpentWorking} days</strong> ${combinedPay}</p>` : '';\n    const successColor = earnIncomeResult.degreeOfSuccess > 1 ? 'darkgreen' : 'darkred';\n    const dc = earnIncomeResult.dc;\n    const roll = earnIncomeResult.roll;\n    return `\n    <div class=\"pf2e chat-card\">\n        <header class=\"card-header flexrow\">\n            <img src=\"systems/pf2e/icons/equipment/treasure/currency/gold-pieces.webp\" title=\"Income\" width=\"36\" height=\"36\">\n            <h3>Earn Income Level ${level}</h3>\n        </header>\n        <div class=\"card-content\">\n            <p><strong>Result</strong> <span style=\"color: ${successColor}\">${degreeOfSuccess} (DC: ${dc}, Roll: ${roll})</span></p>\n            <p><strong>Skill</strong> ${escapeHtml(skillName)}</p>\n            <p><strong>Salary per day</strong> ${payPerDay}</p>\n            ${forDays}\n        </div>\n    </div>\n    `;\n}\nfunction postToChat(skillName, earnIncomeResult) {\n    const content = chatTemplate(skillName, earnIncomeResult);\n    const chatData = {\n        user: game.user.id,\n        content,\n        speaker: ChatMessage.getSpeaker(),\n    };\n    ChatMessage.create(chatData, {});\n}\nfunction isProficiencyWithoutLevel() {\n    return game.settings.get('pf2e', 'proficiencyVariant') === 'ProficiencyWithoutLevel';\n}\nfunction calculateIncome(actor, skill, roll, level, days) {\n    const dcOptions = {\n        proficiencyWithoutLevel: isProficiencyWithoutLevel(),\n    };\n    const earnIncomeOptions = {\n        useLoreAsExperiencedProfessional: isExperiencedProfessional(actor) && skill.isLore,\n    };\n    const income = game.pf2e.actions.earnIncome(level, days, roll, skill.proficiency, earnIncomeOptions, dcOptions);\n    postToChat(skill.name, income);\n}\nfunction runEarnIncome(actor, skill, assurance, level, days) {\n    if (assurance) {\n        const actorLevel = actor.data.data.details?.level?.value ?? 1;\n        const proficiencyLevel = isProficiencyWithoutLevel() ? 0 : actorLevel;\n        const proficiencyBonus = proficiencyLevel + skill.rank * 2;\n        calculateIncome(actor, skill, { dieValue: 10, modifier: proficiencyBonus }, level, days);\n    } else {\n        const options = actor.getRollOptions(['all', 'skill-check', skill.name]);\n        options.push('earn-income');\n        game.pf2e.Check.roll(\n            new game.pf2e.CheckModifier(\n                '<span style=\"font-family: Pathfinder2eActions\">A</span> Earn Income',\n                actor.data.data.skills[skill.acronym],\n                [],\n            ),\n            { actor, type: 'skill-check', options },\n            event,\n            (roll) => {\n                const dieValue = roll.dice[0].results[0].result;\n                const modifier = roll._total - dieValue;\n                calculateIncome(actor, skill, { dieValue, modifier }, level, days);\n            },\n        );\n    }\n}\nfunction getSkills(actor) {\n    return (\n        Object.entries(actor.data.data.skills)\n            .map(([acronym, value]) => {\n                return {\n                    acronym,\n                    name: capitalize(value.name),\n                    isLore: value.lore === true,\n                    proficiency: rankToProficiency(value.rank),\n                    rank: value.rank,\n                };\n            })\n            // earn income is a trained action\n            .filter((skill) => skill.proficiency !== 'untrained')\n    );\n}\nfunction askSkillPopupTemplate(skills) {\n    const level = parseInt(localStorage.getItem('earnIncomeLevel') ?? 0, 10);\n    const days = parseInt(localStorage.getItem('earnIncomeDays') ?? 1, 10);\n    const skillAcronym = localStorage.getItem('earnIncomeSkillAcronym');\n    const assurance = localStorage.getItem('earnIncomeAssurance') === 'true';\n    return `\n    <form>\n    <div class=\"form-group\">\n        <label>Trained Skills/Lores</label>\n        <select name=\"skillAcronym\">\n            ${skills\n                .map(\n                    (skill) =>\n                        `<option value=\"${skill.acronym}\" ${\n                            skillAcronym === skill.acronym ? 'selected' : ''\n                        }>${escapeHtml(skill.name)}</option>`,\n                )\n                .join('')}\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label>Use Assurance</label>\n        <input name=\"assurance\" type=\"checkbox\" ${assurance ? 'checked' : ''}>\n    </div>\n    <div class=\"form-group\">\n        <label>Level</label>\n        <select name=\"level\">\n            ${Array(21)\n                .fill(0)\n                .map((_, index) => `<option value=\"${index}\" ${index === level ? 'selected' : ''}>${index}</option>`)\n                .join('')}\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label>Days</label>\n        <input type=\"number\" name=\"days\" value=\"${days}\">\n    </div>\n    </form>\n    `;\n}\nfunction showEarnIncomePopup(actor) {\n    if (actor === null || actor === undefined) {\n        ui.notifications.error(`You must select at least one PC`);\n    } else {\n        const skills = getSkills(actor);\n        new Dialog({\n            title: 'Earn Income',\n            content: askSkillPopupTemplate(skills),\n            buttons: {\n                no: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: 'Cancel',\n                },\n                yes: {\n                    icon: '<i class=\"fas fa-coins\"></i>',\n                    label: 'Earn Income',\n                    callback: ($html) => {\n                        const level = parseInt($html[0].querySelector('[name=\"level\"]').value, 10) ?? 1;\n                        const days = parseInt($html[0].querySelector('[name=\"days\"]').value, 10) ?? 1;\n                        const skillAcronym = $html[0].querySelector('[name=\"skillAcronym\"]').value;\n                        const assurance = $html[0].querySelector('[name=\"assurance\"]').checked;\n                        const skill = skills.find((skill) => skill.acronym === skillAcronym);\n                        localStorage.setItem('earnIncomeLevel', level);\n                        localStorage.setItem('earnIncomeDays', days);\n                        localStorage.setItem('earnIncomeSkillAcronym', skillAcronym);\n                        localStorage.setItem('earnIncomeAssurance', assurance);\n                        runEarnIncome(actor, skill, assurance, level, days);\n                    },\n                },\n            },\n            default: 'yes',\n        }).render(true);\n    }\n}\nshowEarnIncomePopup(actor);","folder":null,"sort":0,"permission":{"default":0,"wgjTDLixUZ8YXqS9":3},"flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.mxHKWibjPrgfJTDg"}},"_id":"t9d3bObnU7lJ1CGX"}
{"name":"Grapple: Athletics","type":"script","author":"wgjTDLixUZ8YXqS9","img":"icons/svg/dice-target.svg","scope":"global","command":"game.pf2e.actions.grapple({ event: event });","folder":null,"sort":0,"permission":{"default":0,"wgjTDLixUZ8YXqS9":3},"flags":{"core":{"sourceId":"Compendium.pf2e.action-macros.i95kcGLIQKOTsnv6"}},"_id":"zbVtogB8pFEJdMXW"}
{"name":"Stance: Dragon Stance","type":"script","author":"wgjTDLixUZ8YXqS9","img":"systems/pf2e/icons/features/feats/dragon-stance.webp","scope":"global","command":"const actors = canvas.tokens.controlled.flatMap((token) => token.actor ?? []);\nif (!actors.length && game.user.character) {\n    actors.push(game.user.character);\n}\nconst ITEM_UUID = 'Compendium.pf2e.feat-effects.qUowHpn79Dpt1hVn'; // Stance: Dragon Stance\nconst source = (await fromUuid(ITEM_UUID)).toObject();\nsource.flags.core ??= {};\nsource.flags.core.sourceId = ITEM_UUID;\nfor await (const actor of actors) {\n    const existing = actor.itemTypes.effect.find((effect) => effect.getFlag('core', 'sourceId') === ITEM_UUID);\n    if (existing) {\n        await existing.delete();\n    } else {\n        await actor.createEmbeddedDocuments('Item', [source]);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"wgjTDLixUZ8YXqS9":3},"flags":{"core":{"sourceId":"Macro.fwRglfBHlHTMjw3S"}},"_id":"zoLQdcvuZJdOmnmI"}
